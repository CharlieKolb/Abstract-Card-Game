from dataclasses import dataclass
import json
import os
import pprint

pp = pprint.PrettyPrinter()

path = os.path.dirname(os.path.realpath(__file__))
data = json.loads("\n".join(open(os.path.join(path, "reactions.json")).readlines()))


@dataclass
class Entry:
    var_name: str
    var_type: str

@dataclass
class Payload:
    name: str
    entries: list[Entry]

@dataclass
class Reaction:
    name: str
    payloads: list[Payload]


def make_entries(json_data):
    res = []
    for k, v in json_data.items():
        res.append(Entry(k, v))
    return res

def make_payloads(json_data):
    res = {}
    for name, data in json_data.items():
        res[name] = Payload(name, make_entries(data))
    return res

def make_reactions(reactions_data):
    res = {}
    for k, v in reactions_data.items():
        if type(v) == type(dict()):
            res[k] = make_reactions(v)
        else:
            if type(v) == type(""):
                v = [v]
            res[k] = Reaction(k, [payloads[x] for x in v])
    return res


payloads = make_payloads(data["payloads"])

#todo
reactions = make_reactions(data["reactions"])


pp.pprint(payloads)
pp.pprint(reactions)


def make_payload_str(payload: Payload, indent):
    res = []
    res.append(" " * indent + f"// Payload `{payload.name}`")
    for entry in payload.entries:
        res.append(" " * indent + f"{entry.var_type} {entry.var_name};")
    return res

def make_class(reaction_entry, indent = 0):
    res = []
    for k, v in reaction_entry.items():
        if type(v) == Reaction:
            res.append(" " * indent + f"public class {k.upper()} : Invokable<{k.upper()}> " + "{")
            for pl in v.payloads:
                res += make_payload_str(pl, indent + 4)
        else:
            res.append(" " * indent + f"public class {k.capitalize()} " + "{")
            res += make_class(v, indent + 4)
        res.append(" " * indent + "}")
    return res

def make_reaction_string(reactions):
    res = []
    res.append(f"// AUTOGENERATED BY Assets/Scripts/Logic/reactions/generate.py")
    res.append("public class Reactions {")

    res += make_class(reactions, 4)

    res.append("}")
    return res


print("\n".join(make_reaction_string(reactions)))